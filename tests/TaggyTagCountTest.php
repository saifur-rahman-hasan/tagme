<?php

use Illuminate\Support\Str;

class TaggyTagCountTest extends TestCase
{
	protected $lesson;

	protected function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub

		// Create new Lesson
		$this->lesson = LessonStub::create(['title' => 'A Lesson title']);
	}

	/**
	 * Create a new Tag
	 *
	 * @param $tag
	 * @param int $count
	 * @return mixed
	 */
	public function createNewTag($tag, $count = 0)
	{
		return TagStub::create([
			'name' => $tag,
			'slug' => Str::slug($tag),
			'count' => $count
		]);
	}

	/**
	 * @test 
	 */
	public function tag_count_is_incremented_when_tagged()
	{
		$tag = $this->createNewTag('Laravel');

		$this->lesson->tag(['laravel']);
		$tag->refresh();

		$this->assertEquals(1, $tag->count);
	}

	/**
	 * @test
	 */
	public function tag_count_is_decremented_when_untagged()
	{
		$tag = $this->createNewTag('Laravel', 10);

		$this->lesson->tag(['laravel']);
		$this->lesson->untag(['laravel']);
		$tag->refresh();

		$this->assertEquals(10, $tag->count);
	}

	/**
	 * @test
	 */
	public function tag_count_does_not_dip_below_zero()
	{
		$tag = $this->createNewTag('Laravel', 0);

		$this->lesson->untag(['laravel']);
		$tag->refresh();

		$this->assertEquals(0, $tag->count);
	}

	/**
	 * @test
	 */
	public function tag_count_does_not_increment_if_already_exists()
	{
		$tag = $this->createNewTag('Laravel', 0);

		$this->lesson->tag(['laravel']);
		$this->lesson->tag(['laravel']);
		$this->lesson->retag(['laravel']);
		$this->lesson->tag(['laravel']);
		$tag->refresh();

		$this->assertEquals(1, $tag->count);
	}
}
