<?php

use Illuminate\Support\Str;

class TaggyModelUsageTest extends TestCase
{
	protected $lesson;

	protected function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub

		// Create predefined tags
		foreach (['PHP', 'Laravel', 'Lumen', 'MySQL', 'Javascript', 'Python', 'TypeScript', 'Redis'] as $tag){
			TagStub::create([
				'name' => $tag,
				'slug' => Str::slug($tag),
				'count' => 0
			]);
		}

		// Create new Lesson
		$this->lesson = LessonStub::create(['title' => 'A Lesson title']);
	}

	/**
	 * @test
	 */
	public function can_tag_to_a_model()
	{
		$this->lesson->tag(TagStub::where('slug', 'laravel')->first());

		$this->assertCount(1, $this->lesson->tags);
		$this->assertContains("Laravel", $this->lesson->tags->pluck('name'));
	}
	
	/**
	 * @test
	 */
	public function can_tag_to_a_model_with_collection_of_tags()
	{
		$tags = TagStub::whereIn('slug', ['php', 'laravel', 'lumen'])->get();
		$this->lesson->tag($tags);

		$this->assertCount(3, $this->lesson->tags);

		foreach (['PHP', 'Laravel', 'Lumen'] as $tag) {
			$this->assertContains($tag, $this->lesson->tags->pluck('name'));
		}
	}

	/**
	 * @test
	 */
	public function can_untag_from_a_model()
	{
		$tags = TagStub::whereIn('slug', ['laravel', 'mysql', 'php'])->get();

		$this->lesson->tag($tags);

		// Using Laravel
		$this->lesson->untag($tags->first());

		$this->assertCount(2, $this->lesson->tags);

		foreach (['MySQL', 'PHP'] as $tag) {
			$this->assertContains($tag, $this->lesson->tags->pluck('name'));
		}
	}

	/**
	 * @test
	 */
	public function can_untag_all_tags_from_a_model()
	{
		$tags = TagStub::whereIn('slug', ['php', 'laravel', 'javascript'])->get();

		$this->lesson->tag($tags);
		$this->lesson->untag();

		// Reload Tags
		$this->lesson->load('tags');

		$this->assertCount(0, $this->lesson->tags);
	}

	/**
	 * @test
	 */
	public function can_retag_tags_to_a_model()
	{
		$tags = TagStub::whereIn('slug', ['laravel', 'php', 'lumen'])->get();
		$newTags = TagStub::whereIn('slug', ['laravel', 'redis', 'javascript'])->get();

		$this->lesson->tag($tags);
		$this->lesson->retag($newTags);

		$this->lesson->load('tags');

		$this->assertCount(3, $this->lesson->tags);

		foreach (['Laravel', 'Redis', 'Javascript'] as $tag) {
			$this->assertContains($tag, $this->lesson->tags->pluck('name'));
		}
	}

	/**
	 * @test
	 */
	public function non_models_are_filtered_when_using_collection()
	{
		$tags = TagStub::whereIn('slug', ['laravel', 'php', 'lumen'])->get();
		$tags->push("Not a Tag Model");

		$this->lesson->tag($tags);

		$this->assertCount(3, $this->lesson->tags);

		foreach (['Laravel', 'PHP', 'Lumen'] as $tag) {
			$this->assertContains($tag, $this->lesson->tags->pluck('name'));
		}
	}
}
